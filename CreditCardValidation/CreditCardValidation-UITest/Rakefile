require 'fileutils'
require 'rubygems'

# Some utility functions
def set(key, value)
  if false == value
    value = 'FALSE'
  elsif true == value
    value = 'TRUE'
  end
  ENV[key.to_s.upcase] = value
end

def fetch(key)
  val = ENV[key.to_s.upcase]
  if 'FALSE' == val
    val = false
  elsif 'TRUE' == val
    val = true
  end
  val
end

# Hardcoding these paths here - adjust them as necessary. These shouldn't change much (if at all)
@current_dir = File.dirname(__FILE__)
@mono = '/Library/Frameworks/Mono.framework/Versions/Current/bin/mono'
@mdtool = '/Applications/Xamarin\\ Studio.app/Contents/MacOS/mdtool build'
@xbuild = '/usr/bin/xbuild'
# This value has to be updated each time the UITest NuGet package is update.
@test_cloud = "#{@mono} ./packages/Xamarin.UITest.0.6.9/tools/test-cloud.exe"

@xtc_app_name = 'Simple Credit Card Validator'
@xtc_series = 'UITest'
@test_assembly_dir = './CreditCardValidation.UITests/bin/Debug/'
@apk = './CreditCardValidation.Droid/bin/Debug/CreditCardValidation.Droid.apk'
@ipa = './CreditCardValidation.iOS/bin/iPhone/Debug/CreditCardValidationiOS-1.0.ipa'
@dsym = './CreditCardValidation.iOS/bin/iPhone/Debug/CreditCardValidationiOS.app.dSYM'

# These values will come environment variables
@xtc_api_key = fetch(:xtc_api_key)
@android_device_id = fetch(:xtc_android_device_id)
@ios_device_id = fetch(:xtc_ios_device_id)
@xtc_user = fetch(:xtc_user)

task :default => [:clean, :build]

task :require_environment do
  if @xtc_api_key.nil? || 0 == @xtc_api_key.length
    raise Exception.new("No Test Cloud API  specified. Please set the XTC_API_KEY environment variable.")
  end

  if @ios_device_id.nil? || 0 == @ios_device_id.length
    raise Exception.new("No iOS test devices specifed. Please set the XTC_IOS_DEVICE_ID environment variable.")
  end

  if @android_device_id.nil? || 0 == @android_device_id.length
    raise Exception.new("No Android test devices specified. Please set the XTC_ANDROID_DEVICE_ID environment variable.")
  end

  if (@xtc_user.nil? || 0 == @xtc_user)
    raise Exception.new("No Test Cloud team member specified. Please set the XTC_USER environment variable.")
  end
end

desc "Cleans the project, removing any artifacts from previous builds"
task :clean do
  directories_to_delete = [
      "./screenshots",
      "./test_servers",
      "./testresults.html",
      "./CreditCardValidation.Droid/bin",
      "./CreditCardValidation.Droid/obj",
      "./CreditCardValidation.Common/bin",
      "./CreditCardValidation.Common/obj",
      "./CreditCardValidation.iOS/bin",
      "./CreditCardValidation.iOS/obj",
      "./CreditCardValidation.Common/obj",
      "./CreditCardValidation.Common/bin"
  ]

  directories_to_delete.each { |x|
    rm_rf x
  }
end

desc "Compiles the Android and iOS projects."
task :build => [:clean, :build_android, :build_ios] do

end

task :build_android do
  puts "Build a RELEASE version."
  system("#{@xbuild} /verbosity:diagnostic /t:Package /p:Configuration=Release /p:AndroidUseSharedRuntime=false /p:EmbedAssembliesIntoApk=true ./CreditCardValidation.Droid/CreditCardValidation.Droid.csproj")

  puts "Build a DEBUG version."
  system("#{@xbuild} /verbosity:diagnostic /t:Package /p:Configuration=Debug /p:AndroidUseSharedRuntime=false /p:EmbedAssembliesIntoApk=true ./CreditCardValidation.Droid/CreditCardValidation.Droid.csproj")
end

task :build_ios do
  puts "Build the IPA:"
  system("#{@mdtool} \"--configuration:Debug|iPhone\" CreditCardValidation.sln")

  puts "Build the iPhoneSimulator APP:"
  system("#{@mdtool} build \"--configuration:Debug|iPhoneSimulator\" CreditCardValidation.sln")
end

desc "Builds the application and then submits the APK and IPA to Xamarin Test Cloud."
task :xtc => [:xtc_android, :xtc_ios] do

end

desc "Rebuild the Android APK, sign it, and then generate the signing information file. Must run this each time the Xamarin Test Cloud Agent is updated."
task :signing_info_file => [:require_environment, :build_android] do

  # Set the keystore information. Notice that the passwords are hardcoded - this is for demonstration purposes only.
  # For security reasons, it's better to keep things like passwords and keystores out of source code control
  keystore_file = "./creditcardvalidation-example.keystore"
  keystore_password = "password1"
  alias_password = "password2"

  # Some information about the the various APKs. Notice that we use a Release build
  unsigned_apk = "./CreditCardValidation.Droid/bin/Release/CreditCardValidation.Droid-sign-again.apk"
  signed_apk = "./CreditCardValidation.Droid/bin/Release/CreditCardValidation.Droid-signed.apk"
  final_apk = "./CreditCardValidation.Droid/bin/Release/CreditCardValidation.Droid.apk" # This is the APK generated by xbuild.

  # Sanity Check - make sure we have the files we need: the APK and the keystore
  raise "Missing the APK #{final_apk}." unless File.exists?(final_apk)
  raise "Missing the keystore #{keystore_file}." unless File.exists?(keystore_file)

  FileUtils.mv(final_apk, unsigned_apk)

  jarsigner_cmd = "jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore #{keystore_file} -signedjar #{signed_apk} -storepass #{keystore_password} -keypass #{alias_password} #{unsigned_apk}  uitest_sample"
  zipalign_cmd =  "zipalign -f -v 4 #{signed_apk} #{final_apk}"
  gen_sign_info_cmd = "#{@test_cloud} gen-sign-info #{final_apk}  #{keystore_file} #{keystore_password} uitest_sample #{alias_password} --dir ./"

  commands_to_run = [
      jarsigner_cmd,
      zipalign_cmd,
      gen_sign_info_cmd
  ]

  commands_to_run.each { | cmd |
    system(cmd)
  }

end

task :xtc_android => [:require_environment, :build_android] do
  raise "Missing the APK #{@apk}." unless File.exists?(@apk)

  command_line = "#{@test_cloud} submit #{@apk} #{@xtc_api_key} --devices #{@android_device_id} --assembly-dir #{@test_assembly_dir} --app-name \"#{@xtc_app_name}\" --user #{@xtc_user} --series \"#{@xtc_series}\""
  tests_passed = system(command_line)
  raise "Some tests failed in test cloud - check the build log. #{command_line}" unless tests_passed
end

task :xtc_ios => [:require_environment, :build_ios] do
  raise "Missing the IPA #{@ipa}." unless File.exists?(@ipa)

  command_line = "#{@test_cloud} submit #{@ipa} #{@xtc_api_key} --devices #{@ios_device_id} --assembly-dir #{@test_assembly_dir} --app-name \"#{@xtc_app_name}\" --dsym $DSYM --user #{@xtc_user} --series \"#{@xtc_series}\""
  tests_passed = system(command_line)

  raise "Some tests failed in test cloud - check the build log." unless tests_passed
end
